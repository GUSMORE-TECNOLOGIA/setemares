# Script de Teste da API de Concierge
# Execute: .\test-api.ps1

Write-Host "üß™ Testando API de Concierge..." -ForegroundColor Green

# Teste 1: Health Check
Write-Host "`n1. Testando Health Check..." -ForegroundColor Yellow
try {
    $health = Invoke-RestMethod -Uri "http://localhost:3001/health" -Method GET
    Write-Host "‚úÖ Health Check: $($health.ok)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Health Check falhou: $($_.Exception.Message)" -ForegroundColor Red
}

# Teste 2: Hist√≥rico de Relat√≥rios
Write-Host "`n2. Testando Hist√≥rico de Relat√≥rios..." -ForegroundColor Yellow
try {
    $history = Invoke-RestMethod -Uri "http://localhost:3001/api/concierge/history?limit=5" -Method GET
    Write-Host "‚úÖ Hist√≥rico: $($history.reports.Count) relat√≥rios encontrados" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Hist√≥rico falhou: $($_.Exception.Message)" -ForegroundColor Red
}

# Teste 3: Gera√ß√£o de Relat√≥rio
Write-Host "`n3. Testando Gera√ß√£o de Relat√≥rio..." -ForegroundColor Yellow
$testData = @{
    clientName = "Teste Automatizado"
    destination = "S√£o Paulo, Brasil"
    checkin = "2025-01-15"
    checkout = "2025-01-20"
    travelType = "familia"
    budget = "confortavel"
    adults = 2
    children = 1
    interests = @("historia", "gastronomia")
    observations = "Teste automatizado do sistema"
} | ConvertTo-Json

try {
    $report = Invoke-RestMethod -Uri "http://localhost:3001/api/concierge/generate" -Method POST -ContentType "application/json" -Body $testData
    Write-Host "‚úÖ Relat√≥rio gerado: ID $($report.report.id)" -ForegroundColor Green
    $reportId = $report.report.id
} catch {
    Write-Host "‚ùå Gera√ß√£o de relat√≥rio falhou: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Teste 4: Busca de Relat√≥rio Espec√≠fico
Write-Host "`n4. Testando Busca de Relat√≥rio..." -ForegroundColor Yellow
try {
    $specificReport = Invoke-RestMethod -Uri "http://localhost:3001/api/concierge/report/$reportId" -Method GET
    Write-Host "‚úÖ Relat√≥rio encontrado: $($specificReport.report.client_name)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Busca de relat√≥rio falhou: $($_.Exception.Message)" -ForegroundColor Red
}

# Teste 5: Gera√ß√£o de PDF
Write-Host "`n5. Testando Gera√ß√£o de PDF..." -ForegroundColor Yellow
$pdfData = @{
    htmlContent = "<html><body><h1>Teste de PDF</h1><p>Este √© um teste automatizado de gera√ß√£o de PDF.</p></body></html>"
    filename = "teste-automatizado.pdf"
} | ConvertTo-Json

try {
    Invoke-RestMethod -Uri "http://localhost:3001/api/generate-pdf" -Method POST -ContentType "application/json" -Body $pdfData -OutFile "teste-automatizado.pdf"
    if (Test-Path "teste-automatizado.pdf") {
        Write-Host "‚úÖ PDF gerado: teste-automatizado.pdf" -ForegroundColor Green
    } else {
        Write-Host "‚ùå PDF n√£o foi criado" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Gera√ß√£o de PDF falhou: $($_.Exception.Message)" -ForegroundColor Red
}

# Teste 6: Regenera√ß√£o Parcial
Write-Host "`n6. Testando Regenera√ß√£o Parcial..." -ForegroundColor Yellow
$regenBody = @{ reportId = $reportId; type = "all" } | ConvertTo-Json
try {
    $regen = Invoke-RestMethod -Uri "http://localhost:3001/api/concierge/regenerate" -Method POST -ContentType "application/json" -Body $regenBody
    Write-Host "‚úÖ Regenera√ß√£o executada: ID $($regen.report.id)" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Regenera√ß√£o falhou (pode faltar contexto ou migra√ß√£o): $($_.Exception.Message)" -ForegroundColor Yellow
}

Write-Host "`nüéâ Testes conclu√≠dos!" -ForegroundColor Green
Write-Host "Para testar a interface web, acesse: http://localhost:5173" -ForegroundColor Cyan
